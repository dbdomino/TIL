1.compile을 사용하는 경우
A모듈을 수정하게 되면 A를 의존하는 모든 모듈이 rebuild 된다. (시간이 오래걸린다)
 

2.implementation을 사용하는 경우
A모듈을 수정하게 되면 A를 직접적으로 의존하는 모듈까지만 rebuild 한다.(빠르다)
 

나는 이유없이 implementation을 사용하고 있었지만 다음과 같은 장점이 있다.
  1.빠르다.

직접적으로 의존하는 모듈까지만 rebuild해주기 때문에.
  2.API 노출을 막는다.
사용자에게 필요이상의 API를 노출하는 것은 불필요하다.(Facade 패턴)
  compile을 사용하면 연결된 모든 모듈의 API가 노출된다.

 
2.의존성 옵션들
implementation: 의존 라이브러리 수정시 본 모듈까지만 재빌드한다.
본 모듈을 의존하는 모듈은 해당 라이브러리의 api 를 사용할 수 없음

api: 의존 라이브러리 수정시 본 모듈을 의존하는 모듈들도 재빌드
본 모듈을 의존하는 모듈들도 해당 라이브러리의 api 를 사용할 수 있음

compileOnly: 이름에서 알 수 있듯이 compile 시에만 빌드하고 빌드 결과물에는 포함하지 않는다.
runtime 시 필요없는 라이브러리인 경우 (runtime 환경에 이미 라이브러리가 제공되고 있는가 하는 등의 경우)

runtimeOnly: runtime 시에만 필요한 라이브러리인 경우

annotationProcessor: annotation processor 명시 (ex:lombok)

testImplementation : 테스트 코드를 수행할 때만 적용.
