자바에서 사용하는 암호화 키 방식
대표적인 암호화 방식
참조블로그 : https://bibi6666667.tistory.com/317

- Java Simplified Encryption (줄여서 jasypt 라고 부릅니다.)
자바 코드 암호화 서비스 제공
DB 패스워드, OAuth Client Secret 등 민감정보를 암호화하기 위해 사용한다.

Jasypt 사용하기
1. 의존성 추가
build.gradle 에 아래 코드 추가

compile 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.3'

2. 비밀번호 암호화
https://www.devglan.com/online-tools/jasypt-online-encryption-decryption 
에서 암호화하고 싶은 코드의 암호화를 진행

[Jasypt Online Encryption] 영역으로 스크롤 후

Enter plain text to Encrypt : 암호화할 코드 입력
Select Type of Encryption : 암호화할 방식 선택 - Two way로 선택. 디폴트 암호화 알고리즘은 PBEWithMD5AndDES이다.
Secret Key to Be Used While ... : 암호화에 사용할 시크릿 키 입력. (임의의 문자열 또는 의미있는 단어. 비밀번호 같은 개념)
[Encrypt]를 누르면 암호화가 완료된 문자열이 아래 Encrypted String에 출력된다.

3. 민감정보를 암호화된 코드로 변경
암호화하기 전 코드를 ENC(암호화한 코드)로 로 치환한 뒤, 2.에서 입력한 시크릿 키를 설정해 준다.

application.properties
```
github.client.secrets=ENC(OQLcoaTQsAdvyxldhkju7xBUa2c8cpTgIKSgM8SipRRMsr7cLHnrwu36AKEZTgTSoE014OG84eo=)
jasypt.encryptor.password=${JASYPT_PASSWORD}
```
참고
${JASYPT_PASSWORD} : 암호화에 사용한 시크릿키를 환경변수로 등록해서 가져 오는 것이다.
인텔리J에서 보려면 인텔리J환경변수로 등록하는 작업이 필요하다.

4. Jasypt Configuration 클래스 추가 및 Bean 설정
```
import org.jasypt.encryption.StringEncryptor;
import org.jasypt.encryption.pbe.PooledPBEStringEncryptor;
import org.jasypt.encryption.pbe.config.SimpleStringPBEConfig;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;

@Configuration
@PropertySource("application.properties")
public class JasyptConfig {
    @Value("${jasypt.encryptor.password}") // 시크릿 키 
    private String encryptKey;

    @Bean("jasyptStringEncryptor")
    public StringEncryptor stringEncryptor() {
        PooledPBEStringEncryptor encryptor = new PooledPBEStringEncryptor();
        SimpleStringPBEConfig config = new SimpleStringPBEConfig();
        config.setPassword(encryptKey);
        config.setAlgorithm("PBEWithMD5AndDES");
        config.setKeyObtentionIterations("1000");
        config.setPoolSize("1");
        config.setSaltGeneratorClassName("org.jasypt.salt.RandomSaltGenerator");
        config.setStringOutputType("base64");
        encryptor.setConfig(config);
        return encryptor;
    }

}
```

Two Way Encryption(PBEWithMD5AndDES)으로 암호화를 진행하는 클래스. 
  ${jasypt.encryptor.password}로 가져온 enctryptKey 변수(=시크릿키)를 가져옴
  setPassword()의 인자로 시크릿키를 설정
  setAlgorithm("PBEWithMD5AndDES") 으로 암호화 타입 설정
위 클래스를 추가 후, 아래 코드를 application.properties에 추가해 JasyptStringEncryptor를 Bean으로 등록한다.

application.properties
```
#jaspyt config
jasypt.encryptor.bean=jasyptStringEncryptor
```

5. @EnableEncryptableProperties 추가
프로젝트 main클래스에 @EnableEncryptableProperties 어노테이션 추가
```
@SpringBootApplication
@EnableEncryptableProperties
public class AirbnbApplication {
    public static void main(String[] args) {
        SpringApplication.run(AirbnbApplication.class, args);
    }
}
```
