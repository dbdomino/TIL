도커에서 네트워크는 어떻게 할당되는가??
- docker0 라는 브릿지 네트워크를 통해 네트워크 연결된다.
도커호스트     -     브릿지(docker0)     -   container(veth0 172.17.0.2)
172.27.20.50          172.17.0.1              -   container(veth1 172.17.0.3)

컨테이너 생겨날때(create, run) 컨테이너에 IP 자동할당 (veth인터페이스 생성), docker inspect 컨테이너   치면 IP 확인가능
모든 컨테이너는 외부 통신을 docker0을 통해 진행(docker0 는 컨테이너의 게이트웨이 역할을함)
L2 통신기반
컨테이너가 외부로 통신하거나, 외부유저가 컨테이너로 접속할 수 있는 통로(브릿지) 역할을 해주는게 docker0   게이트웨이

컨테이너 포트를 외부로 노출하려면 port-forwarding 을 해줘야 한다.
- container port 를 외부로 노출시켜 외부 연결 허용
- iptables rule 을 통한 포트 노출
		-p hostPort:containerPort
		-p containerPort                     (컨테이너포트만 있을 경우, 도커호스트port는 랜덤하게 설정된다.)
		-P                                        (대문자 P를 쓸 경우 랜덤하게 포트 연결)
docker run -d --name web -p 80:80 nginx:1.14        여기서 80:80은 도커호스트port:컨테이너에서port 를 포워딩시키는 것을 의미

실습
docker run -it --name c1 busybox        ->       ip addr   치면 ip정보 확인가능,     ping -c 3 8.8.8.8    핑 쳐보면 외부로 통신 잘된다.
docker run -it --name c2 busybox
docker run -d -p 80:80 --name web1 nginx

sudo iptables -t nat -L -v      쳐보면 iptable 항목 3번째체 POSTROUTING 영역에 보면 MASQUERADE 된 영역에 도커 컨테이너의 IP를 확인할 수 있다.
도커에서 포트포워딩 설정(-p 옵션) 을 했다면, iptable에도 해당정보가 갱신되어 portforwarding이 지원된다.
강제삭제 (docker ps -f 컨테이너이름)을 한다면 iptable에도 정보가 갱신된다.



---------------------컨테이너에 별도 네트워크 추가하기------------------------------------------
기본적으로 컨테이너는 docker0를 통해서 ip를 자동으로 할당하기에, 컨테이너 만들 때 부터 정적으로 ip를 할당하는건 안된다.
만약 그러려면 docker0의 네트워크 대역을 바꾸거나, user-defined 네트워크를 만들어 할당해야 한다.

user-defined bridge network 생성
$ docker network create --driver bridge --subnet 192.168.100.0/24 --gateway 192.168.100.254 mynet
$ docker network create --driver bridge \
    --subnet 192.168.100.0/24 \
	--gateway 192.168.100.254 \
	mynet
※ (--driver bridge) 는 빼도 된다고 함, 뺀다면 기본적으로 bridge로 할당됨/.
$ docker network create --driver bridge --subnet 192.168.100.0/24 --gateway 192.168.100.1 mynet1
	
$ docker network ls    (user-defined bridge 네트워크 조회)
$ docker network inspect mynet1     (mynet1 브릿지 네트워크 상세조회 가능)

$ docker run -d --name web -p 80:80 nginx:1.14              (위처럼 별개네트워크 생성 했을때 별지시없으면 80포트로 연결은 기본 docker0 로 연결)
$ curl localhost

$ docker run -it --name c1 --net mynet1 busybox           (--net mynet1  이 핵심, 유저 정의 브릿지를 사용하겠다는 소리, 여기맞춰 ip도 설정됨.)
$ docker run -it --name c2 --net mynet1 --ip 192.168.100.100 busybox           (--net mynet1  이 핵심, mynet1의 서브넷 기준으로 정적 ip도 할당 가능)
$ docker run -d --name appjs \
    --net mynet --ip 192.168.100.100 -p 8080:8080 \          (mynet 이라는 network를 사용한다고 설정했을 때 컨테이너는 커스텀 네트워크의 ip로 잡힘)
	smlinux/appjs
	
sudo iptables -t nat -L -v    (iptable 에서 확인하는 방법)

----------------------------컨테이너끼리 통신 하는 방법
$ docker run -d --name mysql -v /dbdata:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=wordpress -e MYSQL=PASSWORD=wordpress mysql:5.7
$ docker run -d --name wordpress --link mysql:mysql_wordpress \
      -e WORDPRESS_DB_PASSWORD=wordpress -p 80:80 wordpress:4

(--link mysql:mysql   이게 핵심, 두개의 컨테이너를 연결, 연결할컨테이너이름:연결이름)



----------------실습
1. 다음의 컨테이너 빌드하기
cat genid.sh
#!/bin/bash
mkdir -p /webdata
while true
do
        /usr/bin/rig | /usr/bin/boxes -d boy > /webdata/index.html
        sleep 5
done

cat Dockerfile
FROM ubuntu:18.04
RUN apt-get update; apt-get -y install rig boxes
ADD genid.sh /bin/genid.sh
RUN chmod +x /bin/genid.sh
ENTRYPOINT ["/bin/genid.sh"]

docker build -t genid .
2. 빌드 한 컨테이너를 이용해 multi-tier 컨테이너를 구축하시오
- genid 에서 생성한 index.html은 volume을 통해 nginx의 웹 컨텐츠로 공유 되어야 합니다.
- nginx 웹서버는 80포트를 통해 genid가 생성한 html 문서를 고객에게 서비스 합니다.
  결과 : genid는 웹문서를 생성하고, nginx는 고객에게 서비스 하는 형식으로 운영됩니다.
  
 docker run -d --name genidn -v /webdata:/webdata genid
 docker run -d --name web -v /webdata:/usr/share/nginx/html:ro -p 80:80 nginx:1.14