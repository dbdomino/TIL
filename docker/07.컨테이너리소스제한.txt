기본적으로 컨테이너는 호스트 하드웨어 리소스의 사용 제한을 받지 않는다.
그러나 Docker HOST는 하드웨어 리소스의 제한이 있다.
별도로 설정하지 않으면 컨테이너간에 자원의 분배가 균형있게 이루어지지 않는다.
이를 위한 설정을 알아보자


------------------------ Memory 리소스 제한
제한 단위는 b, k, m, g로 할당
--memory, -m   컨테이너가 사용할 최대 메모리 양을 지정
--memory-swap   컨테이너가 사용할 스왑 메모리 영역을 설정, 메모리+스왑영역
--memory-reservation   --memory 값보다 적은 값으로 구성하는 최소 확정적으로 제공되는 메모리(soft simit memory) 설정
--oom-kill-disable    OOM Killer가 프로세스 kill 하지 못하도록 보호  (리눅스 커널이 메모리가모자라면 OutOfMemory Killer가 동작하여 메모리 많이 할당중인 프로세스를 죽인다. 이를 방지하는 명령어) - Host의 OOM Killer가 Docker Container내의 프로세스를 죽이는 또 하나의 원인이 될 수 있다
※ --oom-kill-disable	default: false, true로 잡으면 OOM이 process를 죽이지 않는다고 하나, os마다 먹히지 않는 경우도 있다고 함.
		--oom-score-adj   (-1000 ~ 1000 점수를 기준으로 높은점수 순서로 OOM killer가 프로세스를 죽인다고 하며, 중요도가 높은 프로세스의 oom score는 대부분 마이너스 라고 한다.)
		--oom-score-adj의 값을 설정하면 /proc/{process_id}/oom_score_adj에 값이 할당되어(default는 0) Kernel이 설정한 badness() score(oom_score)의 값보다, 사용자가 설정한 oom_score_adj값을 우선시 하도록 설정 가능해지는 것이다.

docker run -d -m 512m nginx:1.14
docker run -d -m 200m --memory-swap 300m nginx:1.14     (메모리 200mb swap 메모리 100mb 할당)
docker run -d -m 200m --memory-swap 500m nginx:1.14     (메모리 200mb swap 메모리 300mb 할당)
docker run -d -m 200m nginx:1.14     (메모리 200mb swap 메모리 200mb 할당, --memory-swap 설정안할 경우 기본적으로 메모리할당2배만큼 swap에적혀짐. 그래서 메모리200 swap200 들어감)
docker run -d -m 1g --memory-reservation 500m nginx:1.14
docker run -d -m 200m --oom-kill-disable nginx:1.14

------------------------- CPU 리소스 제한
CPU 리소스 제한
--cpus      컨테이너에 할당된 CPU core 수를 지정
--cpuset-cups     컨테이너가 사용할 수 있는 CPU나 코어를 할당. cpu index는 0부터 시작됨.   --cpuset-cpus=0-3
--cpu-share      컨테이너가 사용하는 CPU 비중을 1024값을 기반으로 설정, --cpu-share 2048 기본 값보다 두 배 많은 CPU 자원을 할당 (-c 1024) (--cpu-share 1024) 같은말임

docker run -d --cpus="1" ubuntu:1.14         1개 코어만 할당(어떤 코어를 할당할지는 모름)
docker run -d --cpus=".5" ubuntu:1.14         1개의 코어에서 절반만 할당

docker run -d --cpuset-cpus 0-3 ubuntu:1.14      0번 1번 2번 3번 코어에서 동작하도록 설정
docker run -d --cpuset-cpus 0 stress:latest      1번 코어에서 동작하도록 설정
docker run -d --cpuset-cpus 1 stress:latest      0번 코어에서 동작하도록 설정
docker run -d --cpuset-cpus 0-1 stress:latest   0번 1번 코어에서 동작하도록 설정

docker run -d --cpu-shares 2048 ubuntu:1.14     기존 컨테이너보다 2배정도 cpu를 할당하도록 설정 (상대적 가중치)
docker run -d -c 2048 --name cload1 stress:latest
docker run -d --name cload2 stress:latest
docker run -d -c 512 --name cload3 stress:latest
docker run -d -c 512 --name cload4 stress:latest


------------------------- Block I/O 제한
--blkio-weight              Block IO의 Quota를 설정할 수 있으며 100~1000까지 선택, default 500  (상대적 가중치) (--cpu-shares 랑 비슷)
--blkio-weight-device  
--device-read-bps         특정 디바이스에 대한 읽기와 쓰기 작업의 초당 제한을 kb, mb, gb 단위로 설정
--device-write-bps         bps(byte per second) 초당 몇 byte I/O들어오게할지 흐름 제어
--device-read-iops         컨테이너의 read/write 속도의 쿼터를 설정한다. 초당 quota를 제한해서 I/O를 발생시킴. 0이상의 정수로 표기 
--device-write-iops         초당 데이터 전송량 = IOPS * 블럭크기(단위 데이터 용량)

docker run -it --rm --blkio-weight 100 ubuntu :latest /bin/bash
docker run -it --rm --device-write-bps /dev/vda:1mb ubuntu:latest /bin/bash
docker run -it --rm --device-write-bps /dev/vda:10mb ubuntu:latest /bin/bash
docker run -it --rm --device-write-iops /dev/vda:10 ubuntu:latest /bin/bash       (iops 10)
docker run -it --rm --device-write-iops /dev/vda:100 ubuntu:latest /bin/bash      (iops 100) 쿼터가 높을수록 I/O가 빠르다

----------------docker monitoring 명령어
docker stats          실행중인 컨테이너의 런타임 통계 확인
docker stats 컨테이너명
	docker stats [Options] [Container...]
docker event       도커 호스트의 실시간 event 정보를 수집해서 출력
	docker events -f container=<MAME>
	docker image -f container=<MAME>
	

cAdvisor         도커 모니터링 툴 
https://github.com/google/cadvisor
아래에 Read.md 에 명령이 다음어럼 보인다. 도커 설치하고 sudo docker run\ 부터 복붙하면 cAdvisor 설치완료 및 실행된다.
To quickly tryout cAdvisor on your machine with Docker, we have a Docker image that includes everything you need to get started. You can run a single cAdvisor to monitor the whole machine. Simply run:

VERSION=v0.36.0 # use the latest release version from https://github.com/google/cadvisor/releases
sudo docker run \
  --volume=/:/rootfs:ro \
  --volume=/var/run:/var/run:ro \
  --volume=/sys:/sys:ro \
  --volume=/var/lib/docker/:/var/lib/docker:ro \
  --volume=/dev/disk/:/dev/disk:ro \
  --publish=8080:8080 \
  --detach=true \
  --name=cadvisor \
  --privileged \
  --device=/dev/kmsg \
  gcr.io/cadvisor/cadvisor:$VERSION
cAdvisor is now running (in the background) on http://localhost:8080. The setup includes directories with Docker state cAdvisor needs to observe.
