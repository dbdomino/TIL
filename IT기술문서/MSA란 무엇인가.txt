MSA (MicroService Architecture)

독립적으로 배포 가능한 각각의 기능을 수행하는 서비스로 구성된 프레임워크
마이크로서비스는 완전히 독립적으로 배포가 가능
다른 기술 스택(개발 언어, 데이터베이스 등)이 사용 가능한 단일 사업 영역에 초점

Monolithic Architecture는 소프트웨어의 모든 구성요소가 한 프로젝트에 통합되어 있는 형태

웹 개발을 예로 들면 웹 프로그램을 개발하기 위해 모듈별로 개발을 하고, 개발이 완료된 웹 어플리케이션을 하나의 결과물로 패키징하여 배포되는 형태

웹의 경우 WAR파일로 빌드되어 WAS에 배포하는 형태

특징

- **부분 장애가 전체 서비스의 장애로 확대될 수 있다.**
    - 개발자의 잘못된 코드 배포 또는 갑작스런 트래픽 증가로 인해 성능에 문제가 생겼을 때, 서비스 전체의 장애로 확대될 수 있다.
- **부분적인 *Scale-out(여러 server로 나누어 일을 처리하는 방식)이 어렵다.**
    - Monolithic Architecture에서는 사용되지 않는 다른 모든 서비스가 Scale-out되어야 하기 때문에 부분 Scale-out이 어렵다.
- **서비스의 변경이 어렵고, 수정 시 장애의 영향도 파악이 힘들다.**
    - 여러 컴포넌트가 하나의 서비스에 강하게 결합되어 있기 때문에 수정에 대한 영향도 파악이 힘들다.
- **배포 시간이 오래 걸린다.**
    - 최근 어플리케이션 개발 방법은 CI/CD를 통한 개발부터 배포까지 빠르게 반영하는 추세이다. 그러나 규모가 커짐에 따라 작은 변경에도 높은 수준의 테스트 비용이 발생하기도 하며, 많은 사람이 하나의 시스템을 개발하여 배포하기 때문에 영향을 줄 수 밖에 없다.
- **한 Framework와 언어에 종속적이다.**
    - Spring framework를 사용할 경우, blockchain 연동 모듈을 추가할 때 node.js를 사용하는 것이 일반적이며 강세이다. 그러나 java를 이용하여 해당 모듈을 작성할 수 밖에 없다. 선정했던 framework가 Spring이기 때문이다.
